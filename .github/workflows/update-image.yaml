name: Update Nginx App Version

on:
  workflow_dispatch: # Allows manual trigger from GitHub UI
  push:
    branches:
      - main # Or the branch your Argo CD app 'simple-nginx-server' is watching
    # --- NEW: Prevent workflow from triggering on its own commits ---
    paths:
      - '**/*.yaml' # Only trigger if YAML files change (more specific than 'any push')
    exclude:
      branches:
        - main # Exclude the main branch for self-triggered pushes if needed
    
    # This is the most effective for bot commits:
    # We will modify the workflow to push as 'github-actions[bot]' and then exclude that actor.
    # Note: 'exclude' on 'push' event requires more complex logic or a separate workflow.
    # The best practice is to include '[skip ci]' in the commit message.

jobs:
  update-and-deploy:
    runs-on: self-hosted
    steps:
      # --- NEW: Cleanup step (still good practice) ---
      - name: Clean Runner Workspace
        run: |
          $workspace = "${{ github.workspace }}"
          
          # Kill any child processes that may be holding files
          Get-Process | Where-Object { $_.Path -like "$env:GITHUB_WORKSPACE*" } | Stop-Process -Force

          $maxAttempts = 5
          $attempt = 0
          while ((Test-Path $env:GITHUB_WORKSPACE) -and ($attempt -lt $maxAttempts)) {
              Remove-Item -Path $env:GITHUB_WORKSPACE -Recurse -Force -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 5
              $attempt++
          }
          if (Test-Path $env:GITHUB_WORKSPACE) {
              Write-Error "Failed to remove workspace after $maxAttempts attempts: $env:GITHUB_WORKSPACE. Files might be locked."
              exit 1
          }
    
          New-Item -ItemType Directory -Path $workspace | Out-Null
        shell: pwsh

      - name: Checkout GitOps Repository
        uses: actions/checkout@v4
        with:
          set-safe-directory: false # Your fix!
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          token: ${{ secrets.GH_PAT }}

      - name: Set new image tag
        id: set_tag
        run: |
          $timestamp = Get-Date -Format "yyyyMMddHHmmss"
          echo "new_tag=nginx:$timestamp" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Update deployment manifest with new image tag
        run: |
          $deploymentFile = "nginx_yaml_files/deployment.yaml" # Adjust path if needed
          $currentImageRegex = 'image: nginx:.*' # More robust regex to handle existing tags
          $newImage = "image: ${{ steps.set_tag.outputs.new_tag }}"

          # Use a regex replacement that matches 'nginx:' followed by any characters until end of line
          (Get-Content $deploymentFile) -replace $currentImageRegex, $newImage | Set-Content $deploymentFile
        shell: pwsh

      - name: Commit and Push Changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add nginx_yaml_files/deployment.yaml
          # --- NEW: Add [skip ci] to the commit message ---
          git commit -m "feat: Update nginx image to ${{ steps.set_tag.outputs.new_tag }} [skip ci]"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}